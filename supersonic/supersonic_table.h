
// supersonic_table generated by DK/circ_table_gen.py -- do not modify manually

 // variables used
 // --sig_max  2.000000
 // --table_div  5.859807
 // --table_op  1.000000

struct tablesupersonic { // 1-dimensional function table
    float low;
    float high;
    float istep;
    int size;
    float data[];
};

template <int tab_size>
struct tablesupersonic_imp {
    float low;
    float high;
    float istep;
    int size;
    float data[tab_size];
    operator tablesupersonic&() const { return *(tablesupersonic*)this; }
};

 static tablesupersonic_imp<200> supersonic_table __rt_data = {
	0,0.540873,99.5,200, {
	0.000000000000,0.007516209211,0.014945952025,0.022290175629,0.029549790705,
	0.036725724981,0.043818870128,0.050830134681,0.057760391635,0.064610530718,
	0.071381406471,0.078073890162,0.084688818191,0.091227043600,0.097689384974,
	0.104076677353,0.110389721840,0.116629335717,0.122796302809,0.128891423031,
	0.134915463077,0.140869205740,0.146753400901,0.152568814372,0.158316179511,
	0.163996245611,0.169609729443,0.175157363814,0.180639849651,0.186057903434,
	0.191412210234,0.196703470543,0.201932353805,0.207099544755,0.212205697435,
	0.217251481056,0.222237534483,0.227164511631,0.232033036414,0.236843747678,
	0.241597254615,0.246294181229,0.250935122214,0.255520686962,0.260051455895,
	0.264528024022,0.268950957720,0.273320837843,0.277638216952,0.281903661975,
	0.286117711884,0.290280919915,0.294393811679,0.298456926948,0.302470778205,
	0.306435891992,0.310352767892,0.314221919449,0.318043833579,0.321819011064,
	0.325547926383,0.329231067790,0.332868897561,0.336461891660,0.340010500390,
	0.343515187660,0.346976392039,0.350394565615,0.353770135458,0.357103542074,
	0.360395201266,0.363645542196,0.366854969638,0.370023901646,0.373152732201,
	0.376241868487,0.379291693928,0.382302605078,0.385274975038,0.388209189968,
	0.391105612884,0.393964619792,0.396786563856,0.399571811164,0.402320705268,
	0.405033602573,0.407710837252,0.410352756266,0.412959684643,0.415531960137,
	0.418069898863,0.420573829603,0.423044059797,0.425480909486,0.427884677663,
	0.430255675869,0.432594194882,0.434900537970,0.437174987928,0.439417839984,
	0.441629369180,0.443809862933,0.445959588761,0.448078826500,0.450167836368,
	0.452226890852,0.454256243093,0.456256158453,0.458226883226,0.460168675872,
	0.462081776057,0.463966435566,0.465822887658,0.467651377662,0.469452132653,
	0.471225391723,0.472971375977,0.474690318491,0.476382434617,0.478047951632,
	0.479687079346,0.481300039449,0.482887036426,0.484448286592,0.485983989314,
	0.487494355743,0.488979580335,0.490439869288,0.491875412350,0.493286410969,
	0.494673050393,0.496035527522,0.497374023301,0.498688730286,0.499979825317,
	0.501247496803,0.502491917675,0.503713272389,0.504911730161,0.506087471685,
	0.507240662653,0.508371480188,0.509480086640,0.510566655751,0.511631346712,
	0.512674330064,0.513695762023,0.514695810106,0.515674627731,0.516632379568,
	0.517569216408,0.518485300247,0.519380779418,0.520255813410,0.521110548261,
	0.521945141120,0.522759735889,0.523554487534,0.524329537978,0.525085040158,
	0.525821134168,0.526537971064,0.527235689254,0.527914438059,0.528574354341,
	0.529215585818,0.529838267939,0.530442546952,0.531028557016,0.531596443031,
	0.532146337983,0.532678385537,0.533192717614,0.533689476747,0.534168793888,
	0.534630810532,0.535075656746,0.535503473059,0.535914388721,0.536308543357,
	0.536686065441,0.537047093722,0.537391755914,0.537720189880,0.538032522534,
	0.538328890777,0.538609420588,0.538874247699,0.539123496827,0.539357302009,
	0.539575785804,0.539779078868,0.539967297409,0.540140552444,0.540298949818,
	0.540442625879,0.540571710512,0.540686343555,0.540786655212,0.540872785553
	}
};

double always_inline supersonicclip(double x) {
    double f = fabs(x);
    f = f * supersonic_table.istep;
    int i = static_cast<int>(f);
    if (i < 0) {
        f = supersonic_table.data[0];
    } else if (i >= supersonic_table.size-1) {
        f = supersonic_table.data[supersonic_table.size-1];
    } else {
    f -= i;
    f = supersonic_table.data[i]*(1-f) + supersonic_table.data[i+1]*f;
    }
    return copysign(f, x);
}

