
// supersonic_bright_table generated by DK/circ_table_gen.py -- do not modify manually

 // variables in use
 // max_sig = 2.000000
 // step operator = 0.500000
 // divider = 10.593360

struct tablesupersonic_bright { // 1-dimensional function table
    float low;
    float high;
    float istep;
    int size;
    float data[];
};

template <int tab_size>
struct tablesupersonic_bright_imp {
    float low;
    float high;
    float istep;
    int size;
    float data[tab_size];
    operator tablesupersonic_bright&() const { return *(tablesupersonic_bright*)this; }
};

 static tablesupersonic_bright_imp<200> supersonic_bright_table __rt_data = {
	0,0.671556,99.5,200, {
	0.000000000000,0.041660504337,0.016044149199,0.043797230958,0.029222332938,
	0.048207557133,0.040592045615,0.054052544947,0.050819587256,0.060802675137,
	0.060325562247,0.068123360732,0.069375787537,0.075802996290,0.078138265234,
	0.083707849799,0.086719084847,0.091753388825,0.095185163393,0.099886260658,
	0.103578616542,0.108072823319,0.111925881926,0.116291888635,0.120243493041,
	0.124530124530,0.128541737227,0.132779145380,0.136826968637,0.141033670771,
	0.145103070526,0.149290363263,0.153372377381,0.157547095913,0.161636254190,
	0.165802490092,0.169895461633,0.174055628631,0.178150380782,0.182305872652,
	0.186401157756,0.190552749753,0.194647787941,0.198795884388,0.202890169570,
	0.207034953261,0.211128139516,0.215269656986,0.219361488640,0.223499705766,
	0.227589972406,0.231724807529,0.235813320616,0.239944658175,0.244031238705,
	0.248158938396,0.252243406238,0.256367312709,0.260449477387,0.264569421580,
	0.268649083306,0.272764880369,0.276841825342,0.280953275740,0.285027276353,
	0.289134164615,0.293204976613,0.297307069260,0.301374427822,0.305471475605,
	0.309535094915,0.313626824227,0.317686398444,0.321772517065,0.325827708449,
	0.329907897956,0.333958343410,0.338032262960,0.342077568094,0.346144834710,
	0.350184573734,0.354244779716,0.358278483489,0.362331177197,0.366358345150,
	0.370403028536,0.374423108225,0.378459240565,0.382471628156,0.386498612160,
	0.390502653712,0.394519818746,0.398514793520,0.402521432449,0.406506530919,
	0.410501843288,0.414476188105,0.418459301265,0.422421923847,0.426391856282,
	0.430341694668,0.434297361725,0.438233238382,0.442173437879,0.446094048578,
	0.450017445042,0.453921344012,0.457826452103,0.461712035022,0.465597201295,
	0.469462686182,0.473326068893,0.477169474981,0.481009021914,0.484828146521,
	0.488641570726,0.492433964101,0.496218717851,0.499981656382,0.503734903523,
	0.507465361576,0.511183949020,0.514878570274,0.518558999332,0.522214068696,
	0.525852467827,0.529463898794,0.533055988185,0.536619247702,0.540160365314,
	0.543670540355,0.547155566564,0.550607306489,0.554030712005,0.557418253485,
	0.560774108263,0.564091309364,0.567373327899,0.570613722911,0.573815334995,
	0.576972222763,0.580086677752,0.583153241613,0.586173744696,0.589143207331,
	0.592063090649,0.594928924433,0.597741839077,0.600497872875,0.603198036560,
	0.605838842345,0.608421221986,0.610942218874,0.613402962520,0.615800622845,
	0.618136220858,0.620408377585,0.622617938015,0.624763580753,0.626846618103,
	0.628866229802,0.630823902782,0.632719288565,0.634554055400,0.636328269050,
	0.638043754637,0.639700936592,0.641301766002,0.642846956568,0.644338546471,
	0.645777476713,0.647165827708,0.648504701411,0.649796182920,0.651041477412,
	0.652242638132,0.653400923628,0.654518325019,0.655596113169,0.656636193442,
	0.657639816743,0.658608785723,0.659544307258,0.660448070410,0.661321221196,
	0.662165329454,0.662981469643,0.663771091028,0.664535190622,0.665275099098,
	0.665991733932,0.666686311714,0.667359671137,0.668012944983,0.668646842429,
	0.669262379825,0.669860290093,0.670441463397,0.671006522617,0.671556295303
	}
};

double always_inline supersonic_brightclip(double x) {
    double f = fabs(x);
    f = f * supersonic_bright_table.istep;
    int i = static_cast<int>(f);
    if (i < 0) {
        f = supersonic_bright_table.data[0];
    } else if (i >= supersonic_bright_table.size-1) {
        f = supersonic_bright_table.data[supersonic_bright_table.size-1];
    } else {
    f -= i;
    f = supersonic_bright_table.data[i]*(1-f) + supersonic_bright_table.data[i+1]*f;
    }
    return copysign(f, x);
}

