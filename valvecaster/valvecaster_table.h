
// 12au7 table generated by DK/tube_table_gen.py -- do not modify manually

struct table1d { // 1-dimensional function table
    float low;
    float high;
    float istep;
    int size;
    float data[];
};

template <int tab_size>
struct table1d_imp {
    float low;
    float high;
    float istep;
    int size;
    float data[tab_size];
    operator table1d&() const { return *(table1d*)this; }
};

static table1d_imp<200> tube_table __rt_data = {
	0.000000000000,0.529716,107.58972,200, {
	0.000000000000,0.003941603351,0.008005899247,0.012195648430,0.016513428519,
	0.020961588579,0.025542199080,0.030256997325,0.035107328624,0.040094083686,
	0.045217632941,0.050477758755,0.055873586811,0.061403518222,0.067065164245,
	0.072855285777,0.078769740035,0.084803437041,0.090950308591,0.097203292390,
	0.103554333822,0.109994407516,0.116513560347,0.123100976809,0.129745066914,
	0.136433575799,0.143153713276,0.149892300553,0.156635930381,0.163371136462,
	0.170084566808,0.176763156074,0.183394291512,0.189965967587,0.196466924838,
	0.202886769304,0.209216069791,0.215446431235,0.221570543479,0.227582205755,
	0.233476328070,0.239248911414,0.244897009293,0.250418673489,0.255812887133,
	0.261079488241,0.266219086758,0.271232977954,0.276123054694,0.280891720791,
	0.285541807259,0.290076492891,0.294499230251,0.298813677816,0.303023638695,
	0.307133006124,0.311145715700,0.315065704154,0.318896874346,0.322643066058,
	0.326308032109,0.329895419289,0.333408753588,0.336851429202,0.340226700835,
	0.343537678818,0.346787326615,0.349978460340,0.353113749902,0.356195721489,
	0.359226761106,0.362209118929,0.365144914257,0.368036140917,0.370884672937,
	0.373692270397,0.376460585339,0.379191167657,0.381885470909,0.384544857996,
	0.387170606663,0.389763914805,0.392325905547,0.394857632095,0.397360082339,
	0.399834183212,0.402280804806,0.404700764243,0.407091469940,0.409360644085,
	0.411562973352,0.413721970324,0.415845789864,0.417938777234,0.420003645386,
	0.422042246725,0.424055922566,0.426045685742,0.428012325648,0.429956473017,
	0.431878642039,0.433779258920,0.435658681906,0.437517215737,0.439355122315,
	0.441172628756,0.442969933565,0.444747211447,0.446504617114,0.448242288333,
	0.449960348384,0.451658908082,0.453338067435,0.454997917037,0.456638539225,
	0.458260009071,0.459862395220,0.461445760609,0.463010163099,0.464555656012,
	0.466082288614,0.467590106531,0.469079152122,0.470549464815,0.472001081405,
	0.473434036324,0.474848361883,0.476244088502,0.477621244910,0.478979858336,
	0.480319954684,0.481641558697,0.482944694110,0.484229383790,0.485495649873,
	0.486743513892,0.487972996896,0.489184119565,0.490376902319,0.491551365425,
	0.492707529094,0.493845413579,0.494965039266,0.496066426765,0.497149596991,
	0.498214571253,0.499261371328,0.500290019540,0.501300538834,0.502292952850,
	0.503267285988,0.504223563478,0.505161811441,0.506082056956,0.506984328118,
	0.507868654093,0.508735065178,0.509583592850,0.510414269820,0.511227130082,
	0.512022208958,0.512799543144,0.513559170752,0.514301131351,0.515025466005,
	0.515732217307,0.516421429415,0.517093148086,0.517747420699,0.518384296288,
	0.519003825565,0.519606060945,0.520191056562,0.520758868294,0.521309553777,
	0.521843172418,0.522359785410,0.522859455742,0.523342248204,0.523808229398,
	0.524257467742,0.524690033466,0.525105998622,0.525505437074,0.525888424498,
	0.526255038380,0.526605357997,0.526939464423,0.527257440510,0.527559370876,
	0.527845341891,0.528115441661,0.528369760015,0.528608388477,0.528831420255,
	0.529038950212,0.529231074847,0.529407892268,0.529569502167,0.529716005793
	}
};

double always_inline tubeclip(double x) {
    static double c = 0;
    static double d = 0;
    static double e = 0;
    double f = fabs(x);
    f = f * tube_table.istep;
    int i = static_cast<int>(f);
    if (i < 0) {
        f = tube_table.data[0];
    } else if (i >= tube_table.size-1) {
        f = tube_table.data[tube_table.size-1];
    } else {
    f -= i;
    f = tube_table.data[i]*(1-f) + tube_table.data[i+1]*f;
    }
    double fm = f*0.5 + c*0.3 + d*0.2 * e*0.1;
    e = d;
    d = c;
    c = f;
    return copysign(fm, x);
}

